{"version":3,"file":"main.js","mappings":"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","sources":["webpack://front/./src/js/es.js","webpack://front/./src/js/fetch.js","webpack://front/./src/js/ws.js","webpack://front/./src/js/currentDate.js","webpack://front/./src/js/app.js"],"sourcesContent":["export default class ForEventSource {\n  constructor() {\n    this.eventSource = new EventSource('http://localhost:3000/sse');\n    this.conectionId = null;\n    this.userList = null;\n    this.userName = null;\n    this.init = this.init.bind(this);\n    this.showUsers = this.showUsers.bind(this);\n  }\n\n  init() {\n    // this.eventSource.addEventListener('open', (e) => {\n    //     console.log('sse open');\n    // });\n\n    // this.eventSource.addEventListener('error', (e) => {\n    //     console.log('sse error');\n    // });\n\n    this.eventSource.addEventListener('message', this.showUsers);\n  }\n\n  showUsers(e) {\n    this.userList = JSON.parse(e.data);\n\n    if (!this.userList.item) {\n      this.conectionId = this.userList.conectionID;\n      return;\n    }\n\n    if (this.userList.item.deleteId) {\n      const deletedEl = document.getElementById(`${this.userList.item.deleteId}`);\n\n      if (deletedEl) {\n        deletedEl.remove();\n      }\n      return;\n    }\n\n    const ul = document.querySelector('ul');\n    const li = document.createElement('li');\n    li.id = this.userList.item.conectionID;\n\n    this.userName = this.userList.item.chatName;\n\n    li.innerHTML = `\n            <div class=\"circle\"></div>\n            <div class=\"name\">${this.userName}</div>\n        `;\n\n    ul.appendChild(li);\n\n    document.querySelector('.popup-container').classList.add('hidden');\n\n    document.querySelector('.btn-container').classList.remove('hidden');\n\n    // console.log('sse message');\n  }\n}\n","export default class Fetcher {\n  constructor() {\n    //   this.url = 'https://ahj-http-back.onrender.com/';\n    this.url = 'http://localhost:3000/';\n  }\n\n  async sendUserName(id, name) {\n    const body = JSON.stringify({\n      conectionID: id,\n      chatName: name,\n    });\n\n    await fetch(`${this.url}chat`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body,\n\n    });\n\n    // const result = await request;\n    // const text = await result.text();\n    // console.log(text);\n  }\n\n  async getUsers() {\n    const request = fetch(`${this.url}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    const result = await request;\n    const text = result.text();\n    return text;\n  }\n}\n","export default class ForWebSocet {\n  constructor(chat, connectionId) {\n    this.ws = new WebSocket('ws://localhost:3000/ws');\n    this.chat = chat;\n    this.connectionId = connectionId;\n    this.createMessage = this.createMessage.bind(this);\n    this.init = this.init.bind(this);\n    this.showMessage = this.showMessage.bind(this);\n  }\n\n  init() {\n    // this.ws.addEventListener('open', (e) => {\n    //     console.log('ws open');\n    // });\n\n    // this.ws.addEventListener('close', (e) => {\n    //     console.log('ws close');\n    // });\n\n    // this.ws.addEventListener('error', (e) => {\n    //     console.log('ws error');\n    // });\n\n    this.ws.addEventListener('message', this.showMessage);\n  }\n\n  showMessage(e) {\n    // console.log(e);\n\n    const data = JSON.parse(e.data);\n    const { chat: messages } = data;\n\n    messages.forEach((message) => {\n      // console.log(this.connectionId)\n      const newMessage = this.createMessage(\n        message.message,\n        message.userName,\n        message.date,\n        message.conectionId,\n      );\n      this.chat.appendChild(newMessage);\n      newMessage.scrollIntoView();\n    });\n\n    // console.log('ws message');\n  }\n\n  sendMessage(msg) {\n    this.ws.send(msg);\n  }\n\n  createMessage(msg, sender, date, id) {\n    let senderName = 'NoName';\n\n    if (sender) { senderName = sender; }\n\n    const divMessage = document.createElement('div');\n    divMessage.classList.add('message');\n\n    if (id !== this.connectionId) {\n      divMessage.classList.add('participant-message');\n    } else {\n      divMessage.classList.add('user-message');\n    }\n\n    const srtong = document.createElement('strong');\n    srtong.textContent = senderName;\n    const span = document.createElement('span');\n    span.textContent = date;\n    const p = document.createElement('p');\n    p.textContent = msg;\n\n    divMessage.appendChild(srtong);\n    divMessage.appendChild(span);\n    divMessage.appendChild(p);\n\n    return divMessage;\n  }\n}\n","export default function getCurrentDate() {\n  const date = new Date();\n  const day = String(date.getDate()).padStart(2, '0');\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const year = date.getFullYear();\n  const hours = String(date.getHours()).padStart(2, '0');\n  const minutes = String(date.getMinutes()).padStart(2, '0');\n\n  return `${day}.${month}.${year} ${hours}:${minutes}`;\n}\n","import ForEventSource from './es';\nimport Fetcher from './fetch';\nimport ForWebSocet from './ws';\nimport getCurrentDate from './currentDate';\n\n(async () => {\n  let userName;\n\n  const eventSource = new ForEventSource();\n  eventSource.init();\n\n  const fetcher = new Fetcher();\n\n  const users = JSON.parse(await fetcher.getUsers());\n\n  const popup = document.querySelector('.popup-container');\n  const btn = popup.querySelector('.action-btn');\n  const ul = document.querySelector('ul');\n\n  const chat = document.getElementById('chat-window');\n  const inputMessage = document.querySelector('.input-message');\n  const chatSend = document.querySelector('.send-btn');\n\n  ul.innerHTML = '';\n\nfor (const key in users) { // eslint-disable-line\n    const li = document.createElement('li');\n    li.id = key;\n\n    li.innerHTML = `\n        <div class=\"circle\"></div>\n        <div class=\"name\">${users[key]}</div>\n    `;\n    document.querySelector('ul').appendChild(li);\n  }\n\n  btn.addEventListener('click', (event) => {\n    event.preventDefault();\n    userName = popup.querySelector('input').value;\n\n  for (const key in users) { // eslint-disable-line\n      if (users[key] === userName) {\n        document.querySelector('.error').classList.remove('hidden');\n        return;\n      }\n    }\n\n    fetcher.sendUserName(eventSource.conectionId, userName);\n  });\n\n  const ws = new ForWebSocet(chat, eventSource.conectionId);\n  ws.init();\n\n  chatSend.addEventListener('click', (ev) => {\n    ev.preventDefault();\n    const message = inputMessage.value;\n\n    if (!message) return;\n    // console.log(message);\n    ws.sendMessage(JSON.stringify({\n      userName,\n      conectionId: eventSource.conectionId,\n      date: getCurrentDate(),\n      message,\n    }));\n\n    inputMessage.value = '';\n  });\n})();\n"],"names":["ForEventSource","constructor","this","eventSource","EventSource","conectionId","userList","userName","init","bind","showUsers","addEventListener","e","JSON","parse","data","item","conectionID","deleteId","deletedEl","document","getElementById","remove","ul","querySelector","li","createElement","id","chatName","innerHTML","appendChild","classList","add","Fetcher","url","sendUserName","name","body","stringify","fetch","method","headers","getUsers","request","text","ForWebSocet","chat","connectionId","ws","WebSocket","createMessage","showMessage","messages","forEach","message","newMessage","date","scrollIntoView","sendMessage","msg","send","sender","senderName","divMessage","srtong","textContent","span","p","getCurrentDate","Date","String","getDate","padStart","getMonth","getFullYear","getHours","getMinutes","fetcher","users","popup","btn","inputMessage","chatSend","key","event","preventDefault","value","ev"],"sourceRoot":""}